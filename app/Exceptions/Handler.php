<?php

namespace App\Exceptions;

use Illuminate\Auth\Access\AuthorizationException;
use Illuminate\Auth\AuthenticationException;
use Illuminate\Foundation\Exceptions\Handler as ExceptionHandler;
use Symfony\Component\HttpKernel\Exception\AccessDeniedHttpException;
use Throwable;

class Handler extends ExceptionHandler
{
    /**
     * A list of the exception types that are not reported.
     *
     * @var array<int, class-string<Throwable>>
     */
    protected $dontReport = [
        //
    ];

    /**
     * A list of the inputs that are never flashed for validation exceptions.
     *
     * @var array<int, string>
     */
    protected $dontFlash = [
        'current_password',
        'password',
        'password_confirmation',
    ];

    /**
     * Register the exception handling callbacks for the application.
     *
     * @return void
     */
    public function register()
    {
        $this->reportable(function (Throwable $e) {
            //
        });
    }

    public function render($request, Throwable $e)
    {
        if ($e instanceof AuthenticationException) {
            return $this->unauthenticated($request, new AuthenticationException('Não autenticado.'));
        }
        if ($request->wantsJson() && $e instanceof WrongCredentialException) {
            return $this->unauthenticated($request, new AuthenticationException($e->getMessage()));
        }
        return parent::render($request, $e); // TODO: Change the autogenerated stub
    }

    protected function prepareJsonResponse($request, Throwable $e)
    {
        if ($e instanceof AccessDeniedHttpException) {
            $e = new AccessDeniedHttpException('Ação não autorizada, sem permissão de acesso.');
        }
        return parent::prepareJsonResponse($request, $e); // TODO: Change the autogenerated stub
    }


}
